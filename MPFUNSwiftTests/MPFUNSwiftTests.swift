//
//  MPFUNSwiftTests.swift
//  MPFUNSwiftTests
//
//  Created by Mike Griebling on 2022-01-20.
//

import XCTest
@testable import MPFUNSwift

class MPFUNSwiftTests: XCTestCase {

    override func setUpWithError() throws {
        // Put setup code here. This method is called before the invocation of each test method in the class.
    }

    override func tearDownWithError() throws {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
    }

    func testExample() throws {
        // This is an example of a functional test case.
        // Use XCTAssert and related functions to verify your tests produce the correct results.
        // Any test you write for XCTest can be annotated as throws and async.
        // Mark your test throws to produce an unexpected failure when your test encounters an uncaught error.
        // Mark your test async to allow awaiting for asynchronous code to complete. Check the results with assertions afterwards.
        let ndp = 500
//        let nrr = ndp + 30
//        let neps = 5 - ndp
        let nwds = Int(Double(ndp) / MPReal.mpdpw) + 2
//
//        var eps = (MPReal(10.0) ** neps)
//        let one = MPReal(1.0)
//        let zero = MPReal.zero
//        var errmx = zero
//
        let t1 = MPReal.pi(nwds)
        let t2 = (-MPReal.log2(nwds))
        let t3 = MPReal("123456789012345678901234567890123456789012345678901234567890" +
                       //123456789012345678901234567890123456789012345678901234567890
                        "123456789012345678901234567890123456789012345678901234567890" +
                       //123456789012345678901234567890123456789012345678901234567890
                        "123456789012345678901234567890123456789012345678901234567890" +
                      // 123456789012345678901234567890123456789012345678901234567890
                        "123456789012345678901234567890123456789012345678901234567890" +
                      // 123456789012345678*898937159956294698249222953276291793286208
                        "123456789012345678901234567890123456789012345678901234567890" +
                        "123456789012345678901234567890123456789012345678901234567890" +
                        "123456789012345678901234567890123456789012345678901234567890" +
                        "123456789012345678901234567890123456789012345678901234567890.0")

        print(t3.n, t3)
//        let pi = MPReal(
//            "3.14159265358979323846264338327950288419716939937510582097494459230781" +
//          // 3.14159265358979323846264338327950288419716939937510582097494459230781
//            "6406286208998628034825342117067982148086513282306647093844609550582231" +
//          // 6406286208998628034825342117067982148086513282306647093844609550582231
//            "7253594081284811174502841027019385211055596446229489549303819644288109" +
//          // 7253594081284811174502841027019385211055596446229489549303819*270829066
//            "7566593344612847564823378678316527120190914564856692346034861045432664" +
//          // 7566593344612847564823378678316527120190914564856692346034861045432664
//            "8213393607260249141273724587006606315588174881520920962829254091715364" +
//          // 8213393607260249141273724587006606315588174881520920962829254091715364
//            "3678925903600113305305488204665213841469519415116094330572703657595919" +
//          // 3678925903600113305305488204665213841469519415116094330572703657595919
//            "5309218611738193261179310511854807446237996274956735188575272489122793" +
//          // 5309218611738193261179310511854807446237996274956735188575272489122793
//            "81830119491")
//          // 81830119491'
//        print("pi = ", pi.n, pi)
//
//        let e1 = 3141.0 / 8192.0
//        let e2 = 6931.0 / 8192.0
 //       let z1 = mpcmplx (0.50 * MPReal.pi, exp(MPReal(0.50)))
 //       let z2 = mpcmplx (-gamma(MPReal(0.50)), cos(MPReal(1.0)))
 //       let ec1 = cmplx (e1, e2, mprknd)
 //       let ec2 = cmplx (-e2, e1, mprknd)
 //       let i1 = 5
        
        print("MPUN2020 quick check of operations and functions")
        print("Test data:")
        print("t1 = pi: \(t1.toString(with: ndp))")
        print("t2 = -log(2): \(t2.toString(with: ndp))")
/*
 3.141592653589793 238462643383279 502884197169399 375105820974944 59230781
 6406286 208998628034825 342117067982148 086513282306647 093844609550582 231
 725359408128 481117450284102 701938521105559 644622948954930 3819x270829066
 30 94030987131313757784024689139012286675287420080619744278943493736085
 7110313421522015343347679026183084796250759943485784148145857953077640
 6294231888542262752045046254282122547527171048070749250967917650028625
 2434811938235262249284794601464384624511939618351377984540126224058962
 373883946082
 
 Good one:
 3.141592653589793 238462643383279 502884197169399 375105820974944 59230781
 6406286 208998628034825 342117067982148 086513282306647 093844609550582 231
 725359408128 481117450284102 701938521105559 644622948954930 3819x644288109
 75 66593344612847564823378678316527120190914564856692346034861045432664
 8213393607260249141273724587006606315588174881520920962829254091715364
 3678925903600113305305488204665213841469519415116094330572703657595919
 5309218611738193261179310511854807446237996274956735188575272489122793
 81830119491
 
 -0.6931471805599453094172321214581765680755001343602552541206800094933
 9362196969471560586332699641868754200148102057068573368552023575813055
 70326707516350759619307275708283714351903070386238916734711233 42741631
 2000989334739613422656051105347851267917891543624081299000231749063457
 5831844059696811061749051529980534929855698965744784921912416905661857
 0948860549811577579729908814809109557361960687538497297477372763151740
 0651081624282210027010614336033920438705139240964127544368084713147972
 672033221535788
 
 Good one:
 -0.6931471805599453094172321214581765680755001343602552541206800094933
 9362196969471560586332699641868754200148102057068573368552023575813055
 70326707516350759619307275708283714351903070386238916734711233 50115364
 4979552391204751726815749320651555247341395258829504530070953263666426
 5410423915781495204374043038550080194417064167151864471283996817178454
 6957026271631064546150257207402481637773389638550695260668341137273873
 7229289564935470257626520988596932019650585547647033067936544325476327
 44951250406
 */
    }

//    func testPerformanceExample() throws {
//        // This is an example of a performance test case.
//        self.measure {
//            // Put the code you want to measure the time of here.
//        }
//    }

}
